# Ultra-optimized Next.js Dockerfile with maximum build speed
# Features: Multi-stage builds, BuildKit cache, parallel processing, Turbopack

FROM node:20-alpine AS base

# Install system dependencies with cache optimization
RUN --mount=type=cache,target=/var/cache/apk \
    apk add --no-cache \
    libc6-compat \
    dumb-init \
    git \
    curl \
    wget \
    openssh-client \
    && apk upgrade --no-cache

# Set working directory
WORKDIR /app/web

# Development stage - maximum speed
FROM base AS development

# Configure SSH for deployment operations
RUN mkdir -p /root/.ssh && \
    chmod 700 /root/.ssh && \
    ssh-keyscan -H github.com >> /root/.ssh/known_hosts && \
    ssh-keyscan -H 82.180.137.156 >> /root/.ssh/known_hosts

# Copy package files
COPY apps/web/package*.json ./

# Install dependencies with aggressive caching
RUN --mount=type=cache,target=/root/.npm \
    --mount=type=cache,target=/root/.cache \
    --mount=type=cache,target=/app/web/node_modules \
    npm ci --include=dev --no-audit --no-fund --prefer-offline

# Copy source code
COPY apps/web/ ./
COPY data/ /app/data/

# Set development environment
ENV NODE_ENV=development
ENV NEXT_TELEMETRY_DISABLED=1
ENV PORT=3000
ENV HOSTNAME="0.0.0.0"
ENV TURBOPACK=1
ENV WATCHPACK_POLLING=true

# Create non-root user
RUN addgroup --system --gid 1001 nodejs && \
    adduser --system --uid 1001 nextjs

# Set permissions
RUN chown -R nextjs:nodejs /app
USER nextjs

EXPOSE 3000

# Health check
HEALTHCHECK --interval=5s --timeout=3s --start-period=10s --retries=2 \
  CMD curl -f http://localhost:3000/api/health || exit 1

# Use Turbopack for fastest development builds
CMD ["npm", "run", "dev", "--", "--turbo"]

# Builder stage - optimized for production builds
FROM base AS builder

# Accept build arguments for environment variables
ARG NEXT_PUBLIC_SITE_NAME=neversatisfiedxo
ARG NEXT_PUBLIC_CF_STREAM_CUSTOMER_CODE
ARG NEXT_PUBLIC_BASE_URL=https://videos.neversatisfiedxo.com

# Set environment variables for build process
ENV NEXT_PUBLIC_SITE_NAME=${NEXT_PUBLIC_SITE_NAME}
ENV NEXT_PUBLIC_CF_STREAM_CUSTOMER_CODE=${NEXT_PUBLIC_CF_STREAM_CUSTOMER_CODE}
ENV NEXT_PUBLIC_BASE_URL=${NEXT_PUBLIC_BASE_URL}

# Copy package files
COPY apps/web/package*.json ./

# Install all dependencies (including dev for build tools)
RUN --mount=type=cache,target=/root/.npm \
    --mount=type=cache,target=/root/.cache \
    npm ci --no-audit --no-fund --prefer-offline

# Copy source
COPY apps/web/ ./
COPY data/ /app/data/
COPY healthcheck.js ./
COPY start-web.sh ./

# Build with aggressive caching and parallel processing
ENV NEXT_TELEMETRY_DISABLED=1
ENV NODE_ENV=production
ENV NEXT_PRIVATE_BUILD_WORKERS=4

RUN --mount=type=cache,target=/.next/cache \
    --mount=type=cache,target=/root/.cache \
    --mount=type=cache,target=/tmp \
    npm run build

# Production stage - minimal and secure
FROM base AS production

ENV NODE_ENV=production
ENV NEXT_TELEMETRY_DISABLED=1
ENV PORT=3000
ENV HOSTNAME="0.0.0.0"

# Create non-root user
RUN addgroup --system --gid 1001 nodejs && \
    adduser --system --uid 1001 nextjs

# Copy built application
COPY --from=builder --chown=nextjs:nodejs /app/web/.next/standalone ./
COPY --from=builder --chown=nextjs:nodejs /app/web/.next/static ./.next/static
COPY --from=builder --chown=nextjs:nodejs /app/web/public ./public
COPY --from=builder --chown=nextjs:nodejs /app/data ./data
COPY --from=builder --chown=nextjs:nodejs /app/web/healthcheck.js ./
COPY --from=builder --chown=nextjs:nodejs /app/web/start-web.sh ./

# Make startup script executable
RUN chmod +x start-web.sh

USER nextjs

EXPOSE 3000

HEALTHCHECK --interval=30s --timeout=10s --start-period=30s --retries=3 \
  CMD node healthcheck.js || exit 1

ENTRYPOINT ["dumb-init", "--"]
CMD ["sh", "-c", "echo 'üöÄ Starting web container...' && echo '‚è≥ Waiting for services...' && sleep 5 && echo 'üåê Starting Next.js application...' && exec node server.js"]
