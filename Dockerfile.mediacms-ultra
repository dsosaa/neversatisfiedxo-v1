# Ultra-optimized MediaCMS Dockerfile with maximum build speed
# Features: Multi-stage builds, BuildKit cache, parallel processing, minimal layers

FROM python:3.11-slim-bullseye AS base

# Install system dependencies with aggressive caching
RUN --mount=type=cache,target=/var/cache/apt,sharing=locked \
    --mount=type=cache,target=/var/lib/apt,sharing=locked \
    apt-get update && apt-get install -y --no-install-recommends \
    build-essential \
    curl \
    wget \
    ffmpeg \
    git \
    libpq-dev \
    libmagic1 \
    nginx \
    postgresql-client \
    redis-tools \
    supervisor \
    openssh-client \
    && rm -rf /var/lib/apt/lists/*

# Set working directory
WORKDIR /home/mediacms.io

# Development stage - maximum speed
FROM base AS development

# Configure SSH for deployment operations
RUN mkdir -p /root/.ssh && \
    chmod 700 /root/.ssh && \
    ssh-keyscan -H github.com >> /root/.ssh/known_hosts && \
    ssh-keyscan -H 82.180.137.156 >> /root/.ssh/known_hosts

# Copy requirements first for better caching
COPY apps/mediacms/requirements*.txt ./

# Install Python dependencies with aggressive caching
RUN --mount=type=cache,target=/root/.cache/pip \
    --mount=type=cache,target=/root/.cache/wheel \
    --mount=type=cache,target=/tmp \
    pip install --no-cache-dir --upgrade pip setuptools wheel && \
    pip install --no-cache-dir -r requirements.txt

# Copy MediaCMS source
COPY apps/mediacms/ ./mediacms/

# Set environment variables
ENV PYTHONPATH=/home/mediacms.io/mediacms
ENV DJANGO_SETTINGS_MODULE=cms.settings
ENV PYTHONUNBUFFERED=1
ENV DEBIAN_FRONTEND=noninteractive

# Create directories
RUN mkdir -p media_files logs static_files

# Set up MediaCMS user
RUN useradd -m -s /bin/bash mediacms && \
    chown -R mediacms:mediacms /home/mediacms.io

# Copy optimized configuration files
COPY apps/mediacms/deploy/docker/supervisord.conf /etc/supervisor/conf.d/supervisord.conf
COPY apps/mediacms/deploy/docker/nginx.conf /etc/nginx/sites-available/default

# Copy initialization script
COPY scripts/init-mediacms-db.sh /usr/local/bin/init-mediacms-db.sh
RUN chmod +x /usr/local/bin/init-mediacms-db.sh

# Create ultra-optimized supervisord configuration
RUN cat > /etc/supervisor/conf.d/supervisord-ultra.conf << 'EOF'
[supervisord]
nodaemon=true
user=root
logfile=/var/log/supervisor/supervisord.log
pidfile=/var/run/supervisord.pid

[program:nginx]
command=/usr/sbin/nginx -g "daemon off;"
autostart=true
autorestart=true
stderr_logfile=/var/log/supervisor/nginx.err.log
stdout_logfile=/var/log/supervisor/nginx.out.log

[program:uwsgi]
command=/home/mediacms.io/bin/uwsgi --ini /home/mediacms.io/mediacms/deploy/docker/uwsgi.ini
directory=/home/mediacms.io/mediacms
user=www-data
autostart=true
autorestart=true
stderr_logfile=/var/log/supervisor/uwsgi.err.log
stdout_logfile=/var/log/supervisor/uwsgi.out.log

# Minimal Celery workers for development
[program:celery_short]
command=/home/mediacms.io/bin/celery -A cms worker -l warning -Q short --concurrency=1 --prefetch-multiplier=1
directory=/home/mediacms.io/mediacms
user=www-data
autostart=true
autorestart=true
stderr_logfile=/var/log/supervisor/celery_short.err.log
stdout_logfile=/var/log/supervisor/celery_short.out.log

[program:celery_long]
command=/home/mediacms.io/bin/celery -A cms worker -l warning -Q long --concurrency=1 --prefetch-multiplier=1
directory=/home/mediacms.io/mediacms
user=www-data
autostart=true
autorestart=true
stderr_logfile=/var/log/supervisor/celery_long.err.log
stdout_logfile=/var/log/supervisor/celery_long.out.log

[program:celery_beat]
command=/home/mediacms.io/bin/celery -A cms beat -l warning
directory=/home/mediacms.io/mediacms
user=www-data
autostart=true
autorestart=true
stderr_logfile=/var/log/supervisor/celery_beat.err.log
stdout_logfile=/var/log/supervisor/celery_beat.out.log
EOF

# Create ultra-fast startup script
RUN cat > /usr/local/bin/start-mediacms-ultra.sh << 'EOF'
#!/bin/bash
set -e

echo "ðŸš€ Starting ultra-optimized MediaCMS..."

# Skip database initialization if SKIP_DB_INIT is true
if [ "${SKIP_DB_INIT:-false}" != "true" ]; then
    echo "ðŸ“Š Initializing database..."
    /usr/local/bin/init-mediacms-db.sh
else
    echo "âš¡ Skipping database initialization (SKIP_DB_INIT=true)"
fi

# Start supervisord with optimized configuration
echo "ðŸŽ¬ Starting MediaCMS services..."
exec /usr/bin/supervisord -c /etc/supervisor/conf.d/supervisord-ultra.conf
EOF

RUN chmod +x /usr/local/bin/start-mediacms-ultra.sh

USER mediacms

# Health check
HEALTHCHECK --interval=10s --timeout=5s --start-period=30s --retries=2 \
  CMD wget --no-verbose --tries=1 --spider http://localhost/ || exit 1

EXPOSE 80

CMD ["/usr/local/bin/start-mediacms-ultra.sh"]

# Production stage - optimized for size and performance
FROM base AS production

# Copy requirements first for better caching
COPY apps/mediacms/requirements*.txt ./

# Install Python dependencies with aggressive caching
RUN --mount=type=cache,target=/root/.cache/pip \
    --mount=type=cache,target=/root/.cache/wheel \
    pip install --no-cache-dir --upgrade pip setuptools wheel && \
    pip install --no-cache-dir -r requirements.txt

# Copy MediaCMS application
COPY apps/mediacms/ ./mediacms/

# Environment for production
ENV PYTHONPATH=/home/mediacms.io/mediacms
ENV DJANGO_SETTINGS_MODULE=cms.settings
ENV PYTHONUNBUFFERED=1
ENV DEBIAN_FRONTEND=noninteractive

# Create required directories
RUN mkdir -p media_files logs static_files

# Production user setup
RUN useradd -m -s /bin/bash mediacms && \
    chown -R mediacms:mediacms /home/mediacms.io

# Copy optimized configuration
COPY apps/mediacms/deploy/docker/supervisord.conf /etc/supervisor/conf.d/supervisord.conf
COPY apps/mediacms/deploy/docker/nginx.conf /etc/nginx/sites-available/default

# Collect static files
RUN python mediacms/manage.py collectstatic --noinput

# Set proper permissions
RUN chown -R mediacms:mediacms /home/mediacms.io

USER mediacms

EXPOSE 80

HEALTHCHECK --interval=30s --timeout=10s --start-period=60s --retries=3 \
  CMD wget --no-verbose --tries=1 --spider http://localhost/ || exit 1

CMD ["/usr/bin/supervisord", "-c", "/etc/supervisor/conf.d/supervisord.conf"]
