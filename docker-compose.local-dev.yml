# Local Development Docker Compose Configuration
# Optimized for faster loading and testing
# Usage: docker compose -f docker-compose.local-dev.yml up -d

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: v0_trailer_postgres_dev
    restart: unless-stopped
    environment:
      - POSTGRES_USER=${POSTGRES_USER:-mediacms}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-devpassword123}
      - POSTGRES_DB=${POSTGRES_DB:-mediacms}
    volumes:
      - postgres_data_dev:/var/lib/postgresql/data
    networks:
      - v0_trailer_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-mediacms} -d ${POSTGRES_DB:-mediacms}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: v0_trailer_redis_dev
    restart: unless-stopped
    command: >
      redis-server
      --requirepass ${REDIS_PASSWORD:-devpassword123}
      --appendonly yes
      --maxmemory 256mb
      --maxmemory-policy allkeys-lru
    volumes:
      - redis_data_dev:/data
    networks:
      - v0_trailer_network
    healthcheck:
      test: ["CMD", "redis-cli", "--pass", "${REDIS_PASSWORD:-devpassword123}", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 15s

  # MediaCMS Backend (Official Image)
  mediacms:
    image: mediacms/mediacms:latest
    container_name: v0_trailer_mediacms_dev
    restart: unless-stopped
    ports:
      - "8000:80"
    environment:
      - POSTGRES_USER=${POSTGRES_USER:-mediacms}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-devpassword123}
      - POSTGRES_DB=${POSTGRES_DB:-mediacms}
      - POSTGRES_HOST=postgres
      - REDIS_HOST=redis
      - REDIS_PASSWORD=${REDIS_PASSWORD:-devpassword123}
      - SECRET_KEY=${DJANGO_SECRET_KEY:-dev-secret-key-for-local-testing-only}
      - ALLOWED_HOSTS=localhost,mediacms,videos.neversatisfiedxo.com,www.videos.neversatisfiedxo.com,web,${DOMAIN_NAME:-localhost}
      - CORS_ALLOWED_ORIGINS=${CORS_ALLOWED_ORIGINS:-http://localhost:3000,http://web:3000,https://videos.neversatisfiedxo.com}
      - DEBUG=${DJANGO_DEBUG:-True}
      - EMAIL_BACKEND=django.core.mail.backends.console.EmailBackend
      - LOGGING_LEVEL=DEBUG
    volumes:
      - mediacms_data_dev:/home/mediacms.io/mediacms/media_files
      - mediacms_logs_dev:/home/mediacms.io/mediacms/logs
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - v0_trailer_network
    healthcheck:
      test: ["CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost/ || curl -f http://localhost/ || exit 1"]
      interval: 30s
      timeout: 15s
      retries: 5
      start_period: 180s

  # Next.js Frontend (Development Mode)
  web:
    build:
      context: .
      dockerfile: Dockerfile
      target: runner
      args:
        BUILDKIT_INLINE_CACHE: 1
        NEXT_PUBLIC_SITE_NAME: ${NEXT_PUBLIC_SITE_NAME:-neversatisfiedxo}
        NEXT_PUBLIC_CF_STREAM_CUSTOMER_CODE: ${NEXT_PUBLIC_CF_STREAM_CUSTOMER_CODE}
        NEXT_PUBLIC_BASE_URL: ${NEXT_PUBLIC_BASE_URL:-http://localhost:3000}
        NODE_ENV: development
    container_name: v0_trailer_web_dev
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=development
      - PORT=3000
      - HOSTNAME=0.0.0.0
      - NEXT_PUBLIC_SITE_NAME=${NEXT_PUBLIC_SITE_NAME:-neversatisfiedxo}
      - NEXT_PUBLIC_CF_STREAM_CUSTOMER_CODE=${NEXT_PUBLIC_CF_STREAM_CUSTOMER_CODE}
      - GATE_PASSWORD=${GATE_PASSWORD:-devpassword123}
      - MEDIACMS_BASE_URL=${MEDIACMS_BASE_URL:-http://mediacms:80}
      - NEXT_PUBLIC_BASE_URL=${NEXT_PUBLIC_BASE_URL:-http://localhost:3000}
      - MEDIACMS_API_TOKEN=${MEDIACMS_API_TOKEN}
      - CF_ACCOUNT_ID=${CF_ACCOUNT_ID}
      - CF_STREAM_API_TOKEN=${CF_STREAM_API_TOKEN}
      - JWT_SECRET=${JWT_SECRET:-dev-jwt-secret-for-local-testing}
      # Development optimizations
      - NEXT_PUBLIC_DEBUG=true
      - NEXT_PUBLIC_OPTIMIZE_IMAGES=true
      - NEXT_PUBLIC_LOW_QUALITY_MODE=true
    volumes:
      - ./data:/app/data:ro
      - ./apps/web/src:/app/src:ro  # Mount source for hot reloading
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      mediacms:
        condition: service_started
    networks:
      - v0_trailer_network
    healthcheck:
      test: ["CMD-SHELL", "node healthcheck.js || curl -f http://localhost:3000/api/health || exit 1"]
      interval: 20s
      timeout: 10s
      retries: 5
      start_period: 90s

# Named volumes for data persistence (development)
volumes:
  postgres_data_dev:
    driver: local
  redis_data_dev:
    driver: local
  mediacms_data_dev:
    driver: local
  mediacms_logs_dev:
    driver: local
  web_data_dev:
    driver: local

# Network configuration
networks:
  v0_trailer_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

